/* DO NOT EDIT THIS FILE - it is machine generated */
#include <chemmisol/ummisco_gama_chemmisol_ChemicalSystem.h>
#include "jni_interface.h"

using namespace chemmisol;

JNIEXPORT jlong JNICALL Java_ummisco_gama_chemmisol_ChemicalSystem_allocate
(JNIEnv *, jobject) {
	ChemicalSystem* system = new ChemicalSystem;
	return (jlong) system;
}

JNIEXPORT void JNICALL Java_ummisco_gama_chemmisol_ChemicalSystem_dispose
(JNIEnv *, jobject, jlong chemical_system_ptr) {
	delete (ChemicalSystem*) chemical_system_ptr;
}

JNIEXPORT void JNICALL Java_ummisco_gama_chemmisol_ChemicalSystem_addReaction
  (JNIEnv * env, jobject j_chemmical_system, jlong cpp_chemmical_system, jobject jreaction) {
	  JNIInterface interface(env);
	  std::string name = interface.CallStringMethod(
				  jreaction, "getName", "()" JSTRING
				  );

	  double logK = interface.CallDoubleMethod(jreaction,
					  "getLogK", "()" JDOUBLE
				  );

	  std::list<jobject> jreagents = interface.CallListMethod(jreaction,
			  "getReagents", "()Ljava/util/List;"
			  );

	  LOG(INFO) << "Adding reaction: " << name << " (log K=" << logK << "): ";
	  std::vector<ReactionComponent> reaction_components;
	  for(auto j : jreagents) {
		  reaction_components.emplace_back(
				  // name
				  interface.CallStringMethod(j,
					  "getName", "()" JSTRING
					  ),
				  // phase
				  interface.CallPhaseMethod(j,
					  "getPhase", "()" JPHASE
					  ),
				  // coefficient
				  interface.CallIntMethod(j,
					  "getCoefficient", "()" JINT
					  )
				  );
		  LOG(INFO) << "  " << reaction_components.back().coefficient << " "
			  << reaction_components.back().name
			  << " (" << reaction_components.back().phase << ")";
	  }
	  ((ChemicalSystem*) cpp_chemmical_system)->addReaction(
		  name, logK, reaction_components);
  }

JNIEXPORT void JNICALL Java_ummisco_gama_chemmisol_ChemicalSystem_addComponent
  (JNIEnv * env, jobject j_chemical_system, jlong cpp_chemical_system, jobject jcomponent) {
	  JNIInterface interface(env);
	  std::string name = 
		  interface.CallStringMethod(jcomponent, "getName", "()" JSTRING);
	  Phase phase =
		  interface.CallPhaseMethod(jcomponent, "getPhase", "()" JPHASE);
	  double concentration =
		  interface.CallDoubleMethod(jcomponent, "getConcentration", "()" JDOUBLE);

	  LOG(INFO) << "Adding component: " << name << " (" << phase << "): " << concentration;

	  ((ChemicalSystem*) cpp_chemical_system)->addComponent(
		  name, phase, concentration
		  );
  }
